/**
 * ÂÅöÁ©∫ÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•‰ΩøÁî®Á§∫‰æã
 * ÈÄÇÁî®‰∫é‰∏ãË∑åÂ∏ÇÂú∫
 */

import GridTradingStrategyShort from './grid-trading-strategy-short.js';
import { getGridStrategyConfig } from './config.js';

// ‰ªé .env Êñá‰ª∂Âä†ËΩΩAPIÂØÜÈí•ÂíåÈÖçÁΩÆ
let baseConfig;
try {
    baseConfig = getGridStrategyConfig();
    console.log('‚úÖ ÈÖçÁΩÆÂ∑≤‰ªé .env Êñá‰ª∂Âä†ËΩΩ\n');
} catch (error) {
    console.error('‚ùå ÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•:', error.message);
    console.log('\nüí° ÊèêÁ§∫:');
    console.log('   1. ËøêË°å npm run setup ÂàõÂª∫ .env Êñá‰ª∂');
    console.log('   2. ÁºñËæë .env Êñá‰ª∂ÔºåÂ°´ÂÖ•‰Ω†ÁöÑAPIÂØÜÈí•');
    console.log('   3. ÈáçÊñ∞ËøêË°åÁ®ãÂ∫è\n');
    process.exit(1);
}

// ÂÅöÁ©∫Á≠ñÁï•ÈÖçÁΩÆÔºàÈÄÇÂêà‰∏ãË∑åÂ∏ÇÂú∫Ôºâ
const shortStrategyConfig = {
    ...baseConfig,
    
    // ÁΩëÊ†ºÈÖçÁΩÆÔºà‰ªéÈ´òÂà∞‰ΩéËÆæÁΩÆÔºâ
    gridLower: 100000,      // ÁΩëÊ†º‰∏ãÈôê
    gridUpper: 130000,      // ÁΩëÊ†º‰∏äÈôê
    gridNumber: 20,         // 20‰∏™ÁΩëÊ†º
    investmentPerGrid: 50,  // ÊØèÊ†ºÊäïËµÑ50 USDT
    
    // ‰∫§ÊòìÂèÇÊï∞
    leverage: 10,           // 10ÂÄçÊù†ÊùÜ
    checkInterval: 15000,   // 15ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
    stopLossPercent: 0.05   // 5%Ê≠¢Êçü
};

async function main() {
    console.log('üîª ÂÅöÁ©∫ÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•');
    console.log('='.repeat(50));
    console.log('üìâ ÈÄÇÁî®Âú∫ÊôØÔºöÈ¢ÑÊúü‰ª∑Ê†º‰∏ãË∑åÊàñÈúáËç°‰∏ãË°å');
    console.log('='.repeat(50));
    
    console.log('\nüìã Á≠ñÁï•ÈÖçÁΩÆ:');
    console.log(`   ‰∫§ÊòìÂØπ: ${shortStrategyConfig.symbol}`);
    console.log(`   ÁΩëÊ†ºËåÉÂõ¥: $${shortStrategyConfig.gridLower} - $${shortStrategyConfig.gridUpper}`);
    console.log(`   ÁΩëÊ†ºÊï∞Èáè: ${shortStrategyConfig.gridNumber}`);
    console.log(`   ÊØèÊ†ºÊäïËµÑ: $${shortStrategyConfig.investmentPerGrid}`);
    console.log(`   Êù†ÊùÜÂÄçÊï∞: ${shortStrategyConfig.leverage}x`);
    console.log(`   ÊÄªÊäïËµÑÈ¢ù: $${shortStrategyConfig.investmentPerGrid * shortStrategyConfig.gridNumber}`);
    console.log('\nüîª Á≠ñÁï•Á±ªÂûã: ÂÅöÁ©∫ÔºàÂçñÈ´ò‰π∞‰ΩéÔºâ');
    console.log('   - ‰ª∑Ê†º‰∏äÊ∂®Êó∂ÂºÄÁ©∫‰ªì');
    console.log('   - ‰ª∑Ê†º‰∏ãË∑åÊó∂Âπ≥‰ªìËé∑Âà©');
    console.log('='.repeat(50));
    
    try {
        // ÂàõÂª∫ÂÅöÁ©∫Á≠ñÁï•ÂÆû‰æã
        const strategy = new GridTradingStrategyShort(shortStrategyConfig);
        
        // Ëé∑ÂèñÂπ∂ÊòæÁ§∫Ë¥¶Êà∑‰ø°ÊÅØ
        console.log('\nüìä Ê£ÄÊü•Ë¥¶Êà∑‰ø°ÊÅØ...');
        const accountInfo = await strategy.getAccountInfo();
        
        if (!accountInfo) {
            console.error('‚ùå Êó†Ê≥ïËé∑ÂèñË¥¶Êà∑‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');
            process.exit(1);
        }
        
        // Á°ÆËÆ§ÊòØÂê¶ÂêØÂä®
        console.log('\n‚ö†Ô∏è  Á≠ñÁï•Âç≥Â∞ÜÂêØÂä®ÔºåËØ∑Á°ÆËÆ§‰ª•‰∏ã‰ø°ÊÅØÔºö');
        console.log(`   1. ËøôÊòØÂÅöÁ©∫Á≠ñÁï•ÔºåÈÄÇÂêà‰∏ãË∑åÂ∏ÇÂú∫`);
        console.log(`   2. Ë¥¶Êà∑‰ΩôÈ¢ùÂÖÖË∂≥ (ÂΩìÂâçÂèØÁî®: ${accountInfo.availableBalance})`);
        console.log(`   3. ÁΩëÊ†ºÂèÇÊï∞Á¨¶ÂêàÈ¢ÑÊúü`);
        console.log(`   4. ÁêÜËß£ÂÅöÁ©∫È£éÈô©Ôºö‰ª∑Ê†ºÊåÅÁª≠‰∏äÊ∂®‰ºöÈÄ†Êàê‰∫èÊçü`);
        console.log('\nüí° ÊèêÁ§∫: Êåâ Ctrl+C ÂèØÈöèÊó∂ÂÅúÊ≠¢Á≠ñÁï•\n');
        
        // Á≠âÂæÖ3ÁßíÂêéÂêØÂä®
        console.log('Á≠ñÁï•Â∞ÜÂú® 3 ÁßíÂêéÂêØÂä®...');
        await sleep(1000);
        console.log('2...');
        await sleep(1000);
        console.log('1...');
        await sleep(1000);
        
        // ÂêØÂä®Á≠ñÁï•
        await strategy.start();
        
        // ËÆæÁΩÆ‰ºòÈõÖÈÄÄÂá∫
        setupGracefulShutdown(strategy);
        
    } catch (error) {
        console.error('‚ùå Á≠ñÁï•ÂêØÂä®Â§±Ë¥•:', error.message);
        process.exit(1);
    }
}

function setupGracefulShutdown(strategy) {
    process.on('SIGINT', () => {
        console.log('\n\n‚è∏Ô∏è  Êî∂Âà∞ÈÄÄÂá∫‰ø°Âè∑ÔºåÊ≠£Âú®ÂÅúÊ≠¢Á≠ñÁï•...');
        strategy.stop();
        console.log('\nüëã ÊÑüË∞¢‰ΩøÁî®ÂÅöÁ©∫ÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•ÔºÅ');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        console.log('\n\n‚è∏Ô∏è  Êî∂Âà∞ÁªàÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®ÂÅúÊ≠¢Á≠ñÁï•...');
        strategy.stop();
        process.exit(0);
    });
    
    process.on('uncaughtException', (error) => {
        console.error('\n‚ùå Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error.message);
        strategy.stop();
        process.exit(1);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
        console.error('\n‚ùå Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
        strategy.stop();
        process.exit(1);
    });
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Á®ãÂ∫èÂºÇÂ∏∏:', error);
        process.exit(1);
    });
}

module.exports = {
    shortStrategyConfig
};
