/**
 * ÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•‰ΩøÁî®Á§∫‰æã
 * Â±ïÁ§∫Â¶Ç‰ΩïÈÖçÁΩÆÂíå‰ΩøÁî®Âä®ÊÄÅÁΩëÊ†ºÁ≠ñÁï•
 */

import GridTradingStrategy from './grid-trading-strategy.js';
import { getGridStrategyConfig } from './config.js';

// ========================================
// ‰ªé .env Êñá‰ª∂Âä†ËΩΩAPIÂØÜÈí•ÂíåÈÖçÁΩÆ
// ========================================
let baseConfig;
try {
    baseConfig = getGridStrategyConfig();
    console.log('‚úÖ ÈÖçÁΩÆÂ∑≤‰ªé .env Êñá‰ª∂Âä†ËΩΩ\n');
} catch (error) {
    console.error('‚ùå ÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•:', error.message);
    console.log('\nüí° ÊèêÁ§∫:');
    console.log('   1. Â§çÂà∂ env.example ‰∏∫ .env');
    console.log('   2. ÁºñËæë .env Êñá‰ª∂ÔºåÂ°´ÂÖ•‰Ω†ÁöÑAPIÂØÜÈí•');
    console.log('   3. ÈáçÊñ∞ËøêË°åÁ®ãÂ∫è\n');
    process.exit(1);
}

// ========================================
// ÈÖçÁΩÆÁΩëÊ†ºÁ≠ñÁï•ÂèÇÊï∞ÔºàÂèØË¶ÜÁõñ .env ‰∏≠ÁöÑÈÖçÁΩÆÔºâ
// ========================================
const strategyConfig = {
    ...baseConfig,  // ‰ªé .env Âä†ËΩΩÁöÑÂü∫Á°ÄÈÖçÁΩÆ
    
    // ÂèØ‰ª•Âú®ËøôÈáåË¶ÜÁõñÁâπÂÆöÂèÇÊï∞
    // gridLower: 60000,
    // gridUpper: 70000,
    // gridNumber: 10,
    // investmentPerGrid: 10,
};

// ========================================
// ‰∏çÂêåÂú∫ÊôØÁöÑÈ¢ÑËÆæÈÖçÁΩÆ
// ========================================

// ‰øùÂÆàÂûãÈÖçÁΩÆ - ÈÄÇÂêàÊñ∞ÊâãÊàñÂ∞èËµÑÈáë
const conservativeConfig = {
    ...baseConfig,
    gridNumber: 5,           // Êõ¥Â∞ëÁöÑÁΩëÊ†º
    investmentPerGrid: 5,    // Êõ¥Â∞èÁöÑÊäïËµÑ
    leverage: 5,             // Êõ¥‰ΩéÁöÑÊù†ÊùÜ
    checkInterval: 30000,    // 30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
};

// ÊøÄËøõÂûãÈÖçÁΩÆ - ÈÄÇÂêàÁªèÈ™å‰∏∞ÂØåÁöÑ‰∫§ÊòìËÄÖ
const aggressiveConfig = {
    ...baseConfig,
    gridNumber: 20,          // Êõ¥Â§öÁöÑÁΩëÊ†º
    investmentPerGrid: 50,   // Êõ¥Â§ßÁöÑÊäïËµÑ
    leverage: 20,            // Êõ¥È´òÁöÑÊù†ÊùÜ
    checkInterval: 5000,     // 5ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
};

// ‰∏≠ÊÄßÁ≠ñÁï•ÈÖçÁΩÆ - Á™ÑÂπÖÈúáËç°Â∏ÇÂú∫
const neutralConfig = {
    ...baseConfig,
    gridNumber: 8,
    investmentPerGrid: 20,
    leverage: 10,
    checkInterval: 15000,    // 15ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
};

// ========================================
// ÂêØÂä®Á≠ñÁï•
// ========================================
async function main() {
    console.log('üéØ Âä®ÊÄÅÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•');
    console.log('='.repeat(50));
    
    // ÈÄâÊã©ÈÖçÁΩÆÔºà‰øÆÊîπËøôÈáåÊù•‰ΩøÁî®‰∏çÂêåÁöÑÈÖçÁΩÆÔºâ
    const config = strategyConfig; // ÂèØÈÄâ: conservativeConfig, aggressiveConfig, neutralConfig
    
    console.log('üìã ‰ΩøÁî®ÈÖçÁΩÆ:');
    console.log(`   ‰∫§ÊòìÂØπ: ${config.symbol}`);
    console.log(`   ÁΩëÊ†ºËåÉÂõ¥: $${config.gridLower} - $${config.gridUpper}`);
    console.log(`   ÁΩëÊ†ºÊï∞Èáè: ${config.gridNumber}`);
    console.log(`   ÊØèÊ†ºÊäïËµÑ: $${config.investmentPerGrid}`);
    console.log(`   Êù†ÊùÜÂÄçÊï∞: ${config.leverage}x`);
    console.log(`   ÊÄªÊäïËµÑÈáëÈ¢ù: $${config.investmentPerGrid * config.gridNumber}`);
    console.log('='.repeat(50));
    
    try {
        // ÂàõÂª∫Á≠ñÁï•ÂÆû‰æã
        const strategy = new GridTradingStrategy(config);
        
        // Ëé∑ÂèñÂπ∂ÊòæÁ§∫Ë¥¶Êà∑‰ø°ÊÅØ
        console.log('\nüìä Ê£ÄÊü•Ë¥¶Êà∑‰ø°ÊÅØ...');
        const accountInfo = await strategy.getAccountInfo();
        
        if (!accountInfo) {
            console.error('‚ùå Êó†Ê≥ïËé∑ÂèñË¥¶Êà∑‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');
            process.exit(1);
        }
        
        // Á°ÆËÆ§ÊòØÂê¶ÂêØÂä®
        console.log('\n‚ö†Ô∏è  Á≠ñÁï•Âç≥Â∞ÜÂêØÂä®ÔºåËØ∑Á°ÆËÆ§‰ª•‰∏ã‰ø°ÊÅØÔºö');
        console.log(`   1. APIÂØÜÈí•Â∑≤Ê≠£Á°ÆÈÖçÁΩÆ`);
        console.log(`   2. Ë¥¶Êà∑‰ΩôÈ¢ùÂÖÖË∂≥ (ÂΩìÂâçÂèØÁî®: ${accountInfo.availableBalance})`);
        console.log(`   3. ÁΩëÊ†ºÂèÇÊï∞Á¨¶ÂêàÈ¢ÑÊúü`);
        console.log('\nüí° ÊèêÁ§∫: Êåâ Ctrl+C ÂèØÈöèÊó∂ÂÅúÊ≠¢Á≠ñÁï•\n');
        
        // Á≠âÂæÖ3ÁßíÂêéÂêØÂä®ÔºàÁªôÁî®Êà∑Êó∂Èó¥Á°ÆËÆ§Ôºâ
        console.log('Á≠ñÁï•Â∞ÜÂú® 3 ÁßíÂêéÂêØÂä®...');
        await sleep(1000);
        console.log('2...');
        await sleep(1000);
        console.log('1...');
        await sleep(1000);
        
        // ÂêØÂä®Á≠ñÁï•
        await strategy.start();
        
        // ËÆæÁΩÆ‰ºòÈõÖÈÄÄÂá∫
        setupGracefulShutdown(strategy);
        
    } catch (error) {
        console.error('‚ùå Á≠ñÁï•ÂêØÂä®Â§±Ë¥•:', error.message);
        process.exit(1);
    }
}

/**
 * ËÆæÁΩÆ‰ºòÈõÖÈÄÄÂá∫Â§ÑÁêÜ
 */
function setupGracefulShutdown(strategy) {
    process.on('SIGINT', () => {
        console.log('\n\n‚è∏Ô∏è  Êî∂Âà∞ÈÄÄÂá∫‰ø°Âè∑ÔºåÊ≠£Âú®ÂÅúÊ≠¢Á≠ñÁï•...');
        strategy.stop();
        
        console.log('\nüëã ÊÑüË∞¢‰ΩøÁî®ÁΩëÊ†º‰∫§ÊòìÁ≠ñÁï•ÔºÅ');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        console.log('\n\n‚è∏Ô∏è  Êî∂Âà∞ÁªàÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®ÂÅúÊ≠¢Á≠ñÁï•...');
        strategy.stop();
        process.exit(0);
    });
    
    process.on('uncaughtException', (error) => {
        console.error('\n‚ùå Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error.message);
        strategy.stop();
        process.exit(1);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
        console.error('\n‚ùå Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
        strategy.stop();
        process.exit(1);
    });
}

/**
 * Áù°Áú†ÂáΩÊï∞
 */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ========================================
// ËøêË°å‰∏ªÂáΩÊï∞
// ========================================
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Á®ãÂ∫èÂºÇÂ∏∏:', error);
        process.exit(1);
    });
}

module.exports = {
    strategyConfig,
    conservativeConfig,
    aggressiveConfig,
    neutralConfig
};

